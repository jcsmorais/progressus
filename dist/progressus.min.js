!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).Progressus=e()}}(function(){return function e(t,n,i){function r(a,o){if(!n[a]){if(!t[a]){var l="function"==typeof require&&require;if(!o&&l)return l(a,!0);if(s)return s(a,!0);var h=new Error("Cannot find module '"+a+"'");throw h.code="MODULE_NOT_FOUND",h}var d=n[a]={exports:{}};t[a][0].call(d.exports,function(e){var n=t[a][1][e];return r(n||e)},d,d.exports,e,t,n,i)}return n[a].exports}for(var s="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(e,t,n){class i{init(e,t){this.container=this.initContainer(e);let n=this.initContainerDependencies();return[this.progressElement,this.textElement,this.valueElement]=n,this.initContainerDependenciesEventListeners(),t=t||{},this.max=this.initMax(t.max||1),this.start=this.initStart(t.value||0),this.formatter=this.initFormatter(t.formatter||this.defaultFormatter),t.text&&this.setText(t.text),this.setValue(0),this}initContainer(e){if(!e||0===e.length)throw new Error("Invalid selector given");let t=document.querySelector(e);if(!t)throw new Error(`No matches found for given selector: ${e}`);return t}initContainerDependencies(){return this.container.hasChildNodes()?this.initContainerExistingDependencies():this.createContainerDependencies()}initContainerExistingDependencies(){let e=[],t=this.getContainerDependenciesClasses();return Object.keys(t).map(n=>{let i=this.container.getElementsByClassName(n)[0];if(t[n]&&!i)throw new Error(`Failed to initialize container, required dependency not found: ${n}`);e.push(i)}),e}createContainerDependencies(){let e=[],t=this.getContainerDependenciesClasses();return Object.keys(t).map(t=>{let n=document.createElement("div");n.className=t,e.push(n),this.container.appendChild(n)}),e}getContainerDependenciesClasses(){return{"progress-bar-progress":!0,"progress-bar-text":!1,"progress-bar-value":!1}}initContainerDependenciesEventListeners(){this.container.addEventListener("progressus:progress:change",this.progressChangeHandler.bind(this)),this.container.addEventListener("progressus:value:change",this.valueChangeHandler.bind(this)),this.container.addEventListener("progressus:text:change",this.textChangeHandler.bind(this))}progressChangeHandler(e){let t=e.detail.percentage;this.progressElement.style.width=`${t}%`}valueChangeHandler(e){let t=e.detail.value,n=this.calcPercentage(t);this.valueElement&&(this.valueElement.innerText=this.formatter({value:t,max:this.max,percentage:n})),this.setProgress(n)}textChangeHandler(e){this.textElement&&(this.textElement.innerText=e.detail.text)}initMax(e){let t=parseInt(e,10);if(isNaN(t)||t<=0)throw new Error(`Failed to initialize max, given value is invalid: ${e}`);return t}initStart(e){let t=parseFloat(e,10);if(isNaN(t)||t<0||t>this.max)throw new Error(`Failed to initialize starting value, given value is invalid: ${e}`);return t}initFormatter(e){if(e&&"function"!=typeof e)throw new Error(`Failed to initialize formatter, given formatter is not a function: ${typeof e}`);return e}defaultFormatter(e){if("object"!=typeof e)throw new Error(`Failed to apply default format, given iteration is not an object: ${typeof e}`);return`${e.percentage}%`}calcPercentage(e){let t=parseFloat(e,10);if(isNaN(t)||t<0||t>this.max)throw new Error(`Failed to calculate percentage, given value is invalid: ${e}`);return Math.round(t/this.max*100)}setProgress(e){let t=parseFloat(e,10);if(isNaN(t)||t<0||t>100)throw new Error(`Failed to set progress bar progress, given percentage is invalid: ${e}`);let n=new CustomEvent("progressus:progress:change",{detail:{percentage:t}});this.container.dispatchEvent(n)}setValue(e){let t=parseFloat(e,10),n=t+this.start;if(isNaN(t)||t<0||n>this.max)throw new Error(`Failed to set progress bar value, given value is invalid: ${e}`);let i=new CustomEvent("progressus:value:change",{detail:{value:n}});this.container.dispatchEvent(i)}setText(e){let t=new CustomEvent("progressus:text:change",{detail:{text:e}});this.container.dispatchEvent(t)}}t.exports=i},{}]},{},[1])(1)});